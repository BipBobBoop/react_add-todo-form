{"version":3,"sources":["components/TodoForm/TodoForm.tsx","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["TodoForm","users","newId","onAdd","useState","title","setTitle","completed","setCompleted","userId","setUserId","isTitleEmpty","setIsTitleEmpty","isUserChosen","setIsUserChosen","newTodo","id","action","method","onSubmit","event","preventDefault","trim","length","className","type","placeholder","value","onChange","target","handleTitleOnChange","handleUserOnChange","disabled","map","user","name","UserInfo","email","href","TodoInfo","todo","classNames","TodoList","todos","username","getUser","usersFromServer","find","App","initialTodos","setInitialTodos","Math","max","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.93f060e8.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { ToDo } from '../../types/ToDo';\nimport { User } from '../../types/User';\n\ntype Props = {\n  users: User[],\n  newId: number,\n  onAdd: (todo: ToDo) => void,\n};\n\nexport const TodoForm: React.FC<Props> = ({ users, newId, onAdd }) => {\n  const [title, setTitle] = useState('');\n  const [completed, setCompleted] = useState(false);\n  const [userId, setUserId] = useState(0);\n  const [isTitleEmpty, setIsTitleEmpty] = useState(false);\n  const [isUserChosen, setIsUserChosen] = useState(false);\n\n  const newTodo: ToDo = {\n    id: newId,\n    title,\n    completed,\n    userId,\n  };\n\n  const handleTitleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setIsTitleEmpty(false);\n  };\n\n  const handleUserOnChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    setIsUserChosen(false);\n  };\n\n  const reset = () => {\n    setTitle('');\n    setCompleted(false);\n    setUserId(0);\n\n    setIsTitleEmpty(false);\n    setIsUserChosen(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setIsTitleEmpty(title.trim().length === 0);\n    setIsUserChosen(userId === 0);\n\n    if (title.trim().length !== 0 && userId !== 0) {\n      onAdd(newTodo);\n      reset();\n    }\n  };\n\n  return (\n    <>\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label>\n            {'Title: '}\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n              value={title}\n              onChange={event => handleTitleOnChange(event)}\n            />\n\n            {isTitleEmpty\n            && <span className=\"error\">Please enter a title</span>}\n          </label>\n        </div>\n\n        <div className=\"field\">\n          <label>\n            {'User: '}\n            <select\n              data-cy=\"userSelect\"\n              value={userId}\n              onChange={event => handleUserOnChange(event)}\n            >\n              <option value=\"0\" disabled>Choose a user</option>\n              {users.map((user: User) => {\n                return (\n                  <option value={user.id} key={user.id}>\n                    {user.name}\n                  </option>\n                );\n              })}\n            </select>\n\n            {isUserChosen\n            && <span className=\"error\">Please choose a user</span>}\n          </label>\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n    </>\n  );\n};\n","import { User } from '../../types/User';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { ToDo } from '../../types/ToDo';\n\ntype Props = {\n  todo: ToDo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    completed,\n    title,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames('TodoInfo', {\n        'TodoInfo--completed': completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { ToDo } from '../../types/ToDo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: ToDo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <>\n      <section className=\"TodoList\">\n        {todos.map(todo => (\n          <TodoInfo todo={todo} key={todo.id} />\n        ))}\n      </section>\n    </>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import './App.scss';\nimport { useState } from 'react';\nimport { TodoForm } from './components/TodoForm/TodoForm';\nimport { TodoList } from './components/TodoList';\nimport { ToDo } from './types/ToDo';\nimport { User } from './types/User';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nfunction getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n\nexport const todos: ToDo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App = () => {\n  const [initialTodos, setInitialTodos] = useState(todos);\n\n  const handleAddTodo = (todo: ToDo) => {\n    const newTodo = { ...todo, user: getUser(todo.userId) };\n\n    setInitialTodos([...initialTodos, newTodo]);\n  };\n\n  const newId = Math.max(...initialTodos.map((todo: ToDo) => todo.id)) + 1;\n\n  return (\n    <div className=\"App\">\n      <TodoForm\n        users={usersFromServer}\n        newId={newId}\n        onAdd={handleAddTodo}\n      />\n      <TodoList todos={initialTodos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}